Left base folder: /home/cmeng/source/minidns.git/minidns-0.3.2
Right base folder: /home/cmeng/ws_experiment/android/minidns-0.3.2
--- minidns-core/src/main/java/org/minidns/idna/DefaultIdnaTransformator.java	2018-08-02 17:57:53.000000000 
+++ minidns-core/src/main/java/org/minidns/idna/DefaultIdnaTransformator.java	2018-08-29 07:50:42.000000000 
@@ -1,27 +1,43 @@
 /*
  * Copyright 2015-2018 the original author or authors
  *
  * This software is licensed under the Apache License, Version 2.0,
  * the GNU Lesser General Public License version 2 or later ("LGPL")
  * and the WTFPL.
+
+/*
+ * Copyright 2015-2018 the original author or authors
+ *
+ * This software is licensed under the Apache License, Version 2.0,
+ * the GNU Lesser General Public License version 2 or later ("LGPL")
+ * and the WTFPL.
  * You may choose either license to govern your use of this software only
  * upon the condition that you accept all of the terms of either
  * the Apache License 2.0, the LGPL 2.1+ or the WTFPL.
  */
 package org.minidns.idna;
 
 import java.net.IDN;
 
+import org.minidns.dnsname.DnsName;
+
 public class DefaultIdnaTransformator implements IdnaTransformator {
 
     @Override
     public String toASCII(String input) {
+        // Special case if input is ".", i.e. a string containing only a single dot character. This is a workaround for
+        // IDN.toASCII() implementations throwing an IllegalArgumentException on this input string (for example Android
+        // APIs level 26).
+        if (DnsName.ROOT.ace.equals(input)) {
+            return DnsName.ROOT.ace;
+        }
+
         return IDN.toASCII(input);
     }
 
     @Override
     public String toUnicode(String input) {
         return IDN.toUnicode(input);
     }
 
 }
--- minidns-core/src/main/java/org/minidns/idna/MiniDnsIdna.java	2018-08-02 17:57:53.000000000 
+++ minidns-core/src/main/java/org/minidns/idna/MiniDnsIdna.java	2018-08-29 07:51:59.000000000 
@@ -1,6 +1,7 @@
+
 /*
  * Copyright 2015-2018 the original author or authors
  *
  * This software is licensed under the Apache License, Version 2.0,
  * the GNU Lesser General Public License version 2 or later ("LGPL")
  * and the WTFPL.
@@ -19,13 +20,13 @@
     }
 
     public static String toUnicode(String string) {
         return idnaTransformator.toUnicode(string);
     }
 
-    public void setActiveTransformator(IdnaTransformator idnaTransformator) {
-        if (idnaTransformator != null) {
+    public static void setActiveTransformator(IdnaTransformator idnaTransformator) {
+        if (idnaTransformator == null) {
             throw new IllegalArgumentException();
         }
         MiniDnsIdna.idnaTransformator = idnaTransformator;
     }
 }
--- minidns-core/src/main/java/org/minidns/record/TLSA.java	2018-08-02 17:57:53.000000000 
+++ minidns-core/src/main/java/org/minidns/record/TLSA.java	2018-08-29 07:48:50.000000000 
@@ -66,12 +66,19 @@
         private MatchingType(byte byteValue) {
             this.byteValue = byteValue;
             MATCHING_TYPE_LUT.put(byteValue, this);
         }
     }
 
+    static {
+        // Ensure that the LUTs are initialized.
+        CertUsage.values();
+        Selector.values();
+        MatchingType.values();
+    }
+
     /**
      * The provided association that will be used to match the certificate presented in
      * the TLS handshake.
      */
     public final byte certUsageByte;
 
