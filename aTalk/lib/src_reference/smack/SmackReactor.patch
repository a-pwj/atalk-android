--- /home/cmeng/source/smack/smack-4.4.0-alpha3-SNAPSHOT-jar/smack-4.4.0-alpha3-SNAPSHOT/org/jivesoftware/smack/SmackReactor.java	2019-07-26 01:00:02.000000000 
+++ /home/cmeng/workspace/android/atalk-android/aTalk/src/main/java/org/jivesoftware/smack/SmackReactor.java	2019-07-29 10:36:11.000000000 
@@ -201,31 +201,31 @@
 
             if (dueScheduledAction != null) {
                 dueScheduledAction.action.run();
                 return;
             }
 
-            ScheduledAction nextScheduledAction = scheduledActions.peek();
+            int newSelectedKeysCount = 0;
+            List<SelectionKey> selectedKeys;
+            synchronized (selector) {
+                ScheduledAction nextScheduledAction = scheduledActions.peek();
 
-            long selectWait;
-            if (nextScheduledAction == null) {
+                long selectWait;
+                if (nextScheduledAction == null) {
                 // There is no next scheduled action, wait indefinitely in select() or until another thread invokes
                 // selector.wakeup().
-                selectWait = 0;
-            } else {
-                selectWait = nextScheduledAction.getTimeToDueMillis();
-            }
+                    selectWait = 0;
+                } else {
+                    selectWait = nextScheduledAction.getTimeToDueMillis();
+                }
 
-            if (selectWait < 0) {
-                // A scheduled action was just released and become ready to execute.
-                return;
-            }
+                if (selectWait < 0) {
+                    // A scheduled action was just released and become ready to execute.
+                    return;
+                }
 
-            int newSelectedKeysCount = 0;
-            List<SelectionKey> selectedKeys;
-            synchronized (selector) {
                 // Before we call select, we handle the pending the interest Ops. This will not block since no other
                 // thread is currently in select() at this time.
                 // Note: This was put deliberately before the registration lock. It may cause more synchronization but
                 // allows for more parallelism.
                 // Hopefully that assumption is right.
                 int myHandledPendingSetInterestOps = 0;
