--- /home/cmeng/source/smack/Smack-4.4.0-alpha3-20200404/org/jivesoftware/smackx/filetransfer/IBBTransferNegotiator.java	2020-02-23 19:05:18.000000000 
+++ /home/cmeng/workspace/android/atalk-android/aTalk/src/main/java/org/jivesoftware/smackx/filetransfer/IBBTransferNegotiator.java	2020-04-05 15:28:12.000000000 
@@ -15,19 +15,22 @@
  * limitations under the License.
  */
 package org.jivesoftware.smackx.filetransfer;
 
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.logging.Logger;
 
+import org.jivesoftware.smack.SmackException;
 import org.jivesoftware.smack.SmackException.NoResponseException;
 import org.jivesoftware.smack.SmackException.NotConnectedException;
 import org.jivesoftware.smack.XMPPConnection;
 import org.jivesoftware.smack.XMPPException.XMPPErrorException;
 import org.jivesoftware.smack.packet.Stanza;
 
+import org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener;
 import org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager;
 import org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest;
 import org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession;
 import org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension;
 import org.jivesoftware.smackx.bytestreams.ibb.packet.Open;
 import org.jivesoftware.smackx.si.packet.StreamInitiation;
@@ -43,21 +46,24 @@
  * @author Henning Staib
  * @see <a href="http://xmpp.org/extensions/xep-0047.html">XEP-0047: In-Band
  *      Bytestreams (IBB)</a>
  */
 public class IBBTransferNegotiator extends StreamNegotiator {
 
+    private static final Logger LOGGER = Logger.getLogger(IBBTransferNegotiator.class.getName());
     private final InBandBytestreamManager manager;
+    private static XMPPConnection mConnection;
 
     /**
      * The default constructor for the In-Band Bytestream Negotiator.
      *
      * @param connection The connection which this negotiator works on.
      */
     protected IBBTransferNegotiator(XMPPConnection connection) {
         super(connection);
+        mConnection = connection;
         this.manager = InBandBytestreamManager.getByteStreamManager(connection);
     }
 
     @Override
     public OutputStream createOutgoingStream(String streamID, Jid initiator,
                     Jid target) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException {
@@ -111,10 +117,45 @@
      */
     private static final class ByteStreamRequest extends InBandBytestreamRequest {
 
         private ByteStreamRequest(InBandBytestreamManager manager, Open byteStreamRequest) {
             super(manager, byteStreamRequest);
         }
+    }
 
+    InputStream getIbbIncomingStream(final StreamInitiation initiation) throws  InterruptedException, SmackException  {
+
+        IbbBytestreamListener listener = new IbbBytestreamListener();
+        manager.removeIgnoredBytestreamRequest(initiation.getSessionID());
+        manager.addIncomingBytestreamListener(listener);
+        return listener.getStream();
     }
 
+    private static class IbbBytestreamListener extends InBandBytestreamListener {
+
+        InputStream inputStream = null;
+
+        public InputStream getStream() throws InterruptedException, SmackException {
+
+            int wait = 50; // wait for 10 seconds
+            do {
+                Thread.sleep(200);
+                if (wait-- < 0) {
+                    throw NoResponseException.newWith(mConnection, "IBB fallback incoming stream wait timed out");
+                }
+            } while (inputStream == null);
+            return inputStream;
+        }
+
+        @Override
+        public void incomingBytestreamRequest(InBandBytestreamRequest request) {
+
+            try {
+                InBandBytestreamSession session = request.accept();
+                session.setCloseBothStreamsEnabled(false);
+                inputStream = session.getInputStream();
+            } catch (SmackException.NotConnectedException | InterruptedException e) {
+                LOGGER.warning("Error in InBand Bytestream Request: " + e.getMessage());
+            }
+        }
+    }
 }
