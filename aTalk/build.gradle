buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath "org.anarres.jarjar:jarjar-gradle:1.0.0" // jarjar.repackage
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.anarres.jarjar' // jarjar.repackage tool

repositories {
    google()
    jcenter()
    maven {
        // Need manual cleanup for new SNAPSHOT update if same name with date change only:
        // Smack official SNAPSHOT repository
        // url 'https://oss.sonatype.org/content/repositories/snapshots'

        // Smack custom library for org.igniterealtime
        url 'https://igniterealtime.org/repo/'
    }
//    maven {
//        // Custom library for org.jitsi - maven-metadata.xml not compatible
//        url 'https://github.com/jitsi/jitsi-maven-repository/tree/master/snapshots'
//    }
    maven {
        // Include the library as local library project for ucrop
        url 'https://jitpack.io'
    }
}

configurations {
    fdroidImplementation
    playstoreImplementation

    jarjar2
    // libraries duplication conflict
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    all*.exclude group: 'xpp3', module: 'xpp3'

    all*.exclude group: 'org.igniterealtime.smack', module: 'smack-extensions'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    defaultConfig {
        applicationId "org.atalk.android"
        versionCode 1065
        versionName "1.6.5" // no alphabet allowed (e.g. 0.8.7.a)

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        multiDexEnabled true
    }

    flavorDimensions("distribution")
    productFlavors {
        playstore {
            dimension "distribution"
        }

        fdroid {
            dimension "distribution"
        }
    }

    buildTypes {
        release {
            // cannot enable for aTalk string resource as not all are per android style
            shrinkResources false
            // too many missing references when enable
            minifyEnabled false
            // useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
        }
    }

    File cfgFile = project.rootProject.file("settings.signing")
    if (cfgFile != null && cfgFile.exists()) {
        println "### Found settings.signing to prepare signingConfig for release signing"
        signingConfigs {
            release {
                Properties config = new Properties()
                config.load(new FileInputStream(cfgFile))

                storeFile file(config.getProperty('keystore'))
                File propsFile = file(config.getProperty('secure_properties'))
                if (propsFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    storePassword props.getProperty('key.store.password')
                    keyAlias props.getProperty('key.store.alias')
                    keyPassword props.getProperty('key.alias.password')
                }
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }

    sourceSets {
        main {
            resources.srcDirs = ['src']

            // disable gradle automatic ndk-build call, which ignore our Android.mk
            jni.srcDirs = []

            // This is necessary if you have pre-compiled libraries .jar/.so in your project.
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        release.setRoot('build-types/release')
    }

    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
        // disable 'MissingTranslation', 'InvalidPackage', 'MissingQuantity', 'AppCompatResource'
    }

    packagingOptions {
        exclude 'jni/**'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
}

ext {
    // Need manual cleanup for new SNAPSHOT update if same name with date change only:
    // ~\.gradle\caches\modules-2\files-2.1\org.igniterealtime.smack
    // Remove source reference in .idea/libraries if source mismatched with class jar

    // for official maven release
    // smackVersion = '4.4.0-alpha2'

    // For smack own respository release
    smackVersion = '4.4.0-alpha2-SNAPSHOT'
}

dependencies {
    jarjar2 'com.googlecode.jarjar:jarjar:1.3'

    // Java implementation dependency: ndkBuild & jarRepackage (avoid class conflict)
    // generated files in libs/$(TARGET_ARCH_ABI)/*.so and libs/*.jar
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:support-v4:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:support-v13:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:design:${rootProject.supportLibraryVersion}"
    implementation 'com.android.support:multidex:1.0.3'

    // libraries from maven repository
    implementation 'ch.imvs:sdes4j:1.1.4'
    // for android better picker
    implementation 'com.code-troopers.betterpickers:library:3.1.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.karumi:dexter:4.2.0'

    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    implementation 'com.github.yalantis:ucrop:2.2.2'

    implementation 'com.googlecode.libphonenumber:libphonenumber:7.5.1'
    implementation 'com.splitwise:tokenautocomplete:2.0.8'

    // when targeting Android API 23 and newer - class obsoleted
    implementation 'cz.msebera.android:httpclient:4.4.1.2' // duplicate class
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'

    implementation 'org.apache.commons:commons-lang3:3.6'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.james:apache-mime4j-core:0.8.1'
    implementation 'org.bitlet:weupnp:0.1.4'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.58'
    // (dependencies = core + prov)

    // Use by provisioning Discover
    // implementation 'org.jitsi:dnssecjava:1.1.3'

    implementation 'org.jmdns:jmdns:3.5.3'
    implementation 'org.opentelecoms.sdp:sdp-api:1.0'

    // Smack local libraries with patches or enhance features
    implementation files('lib/smack/smack-extensions-4.4.0-alpha2-SNAPSHOT.jar')

    // Smack 4.4.0-alpha2 has moved to use minidns v0.4.0-alpha3
    implementation "org.igniterealtime.smack:smack-android-extensions:$smackVersion"
    implementation "org.igniterealtime.smack:smack-bosh:$smackVersion"
    implementation "org.igniterealtime.smack:smack-compression-jzlib:$smackVersion"
    implementation "org.igniterealtime.smack:smack-core:$smackVersion"
    implementation "org.igniterealtime.smack:smack-experimental:$smackVersion"
    // implementation "org.igniterealtime.smack:smack-extensions:$smackVersion"
    implementation "org.igniterealtime.smack:smack-im:$smackVersion"
    implementation "org.igniterealtime.smack:smack-legacy:$smackVersion"
    implementation "org.igniterealtime.smack:smack-resolver-minidns:$smackVersion"
    implementation "org.igniterealtime.smack:smack-sasl-provided:$smackVersion"
    implementation "org.igniterealtime.smack:smack-tcp:$smackVersion"

    implementation "org.igniterealtime.smack:smack-omemo:$smackVersion"
    implementation "org.igniterealtime.smack:smack-omemo-signal:$smackVersion"

    // Use jarjar.repackage in place of a dependency notation (destination file?).
//    implementation 'org.jitsi:ice4j:2.0.0-SNAPSHOT'
//    implementation jarjar.repackage {
//        from 'org.jitsi:ice4j:2.0.0-SNAPSHOT'
//        // classRename 'java.util.Objects' 'org.jivesoftware.smack.util.Objects' // not supported
//        classDelete 'org.jivesoftware.smackx.omemo.OmemoManager'
//    }

    // Use jarjar.repackage in place of a dependency notation (destination file?).
    //    implementation jarjar.repackage {
    //        from "org.igniterealtime.smack:smack-omemo:$smackVersion"
    //        classDelete 'org.jivesoftware.smackx.omemo.OmemoManager'
    //    }

    implementation 'org.jxmpp:jxmpp-jid:0.6.3'
    // (dependencies = jxmpp-core + jxmpp-stringprep-libidn')

    implementation 'org.jetbrains:annotations-java5:15.0'
    implementation 'org.osgi:osgi.core:7.0.0'

    playstoreImplementation "com.google.android.gms:play-services-location:${rootProject.gmsPlayServicesVersion}"
    playstoreImplementation "com.google.android.gms:play-services-maps:${rootProject.gmsPlayServicesVersion}"
    playstoreImplementation "com.google.android.gms:play-services-panorama:${rootProject.gmsPlayServicesVersion}"
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    def ndkDir = android.ndkDirectory
    def jniSrcDir = projectDir.toString() + "\\jni"

    println '****************************************************************************************'
    println "Main jni directory for NDK build => " + jniSrcDir
    println '****************************************************************************************'

    // APP_PLATFORM=android-15 for aTalk minimum SDK platform support i.e. API-16
    // this setting if set takes priority over value set in jni/Application.mk
    commandLine "$ndkDir/ndk-build",
            '-C' + projectDir + '/jni',
            '-j', Runtime.runtime.availableProcessors(),
            'NDK_OUT=' + project.buildDir,
            'NDK_LIBS_OUT=' + projectDir + '/libs/$(TARGET_ARCH_ABI)'
    //'V=1'  // enable only for compilation debug only
}

task ndkClean(type: Exec, description: 'Clean JNI object files') {
    def ndkDir = android.ndkDirectory
    commandLine "$ndkDir/ndk-build",
            '-C' + projectDir + '/jni',
            'clean'
}

// renames packages to be compatiable with aTalk apk build
task jarRepackage(type: Copy, description: 'Repackage jar to avoid conflict') {

    project.ant {
        taskdef name: "jarjar2", classname: 'com.tonicsystems.jarjar.JarJarTask',
                classpath: configurations.jarjar2.asPath

        jarjar2(jarfile: 'libs/fmj-1.0.jar') {
            zipfileset(src: 'lib/bundles/fmj-1.0-20170519.163031-24.jar')
            rule pattern: 'java.awt.**',
                    result: 'org.atalk.android.util.java.awt.@1'
            rule pattern: 'java.beans.**',
                    result: 'org.atalk.android.util.java.beans.@1'
            rule pattern: 'javax.swing.**',
                    result: 'org.atalk.android.util.javax.swing.@1'
            rule pattern: 'javax.sound.**',
                    result: 'org.atalk.android.util.javax.sound.@1'
            rule pattern: 'javax.imageio.**',
                    result: 'org.atalk.android.util.javax.imageio.@1'
            // remove extracted modules for changes
            zap pattern: 'net.sf.fmj.media.RegistryDefaults'
            zap pattern: 'javax.media.format.VideoFormat'
            zap pattern: 'javax.media.Manager'
            zap pattern: 'javax.media.Manager**'
        }

        // ice4j-2.0.0 work only with AWS disabled - otherwise hang in AWS EC2 conn.getContent()
        // System.setProperty(MappingCandidateHarvesters.DISABLE_AWS_HARVESTER_PNAME, "true")
        // Objects class only available in API-19 and above
        jarjar2(jarfile: 'libs/ice4j-2.0.0.jar') {
            zipfileset(src: 'lib/bundles/ice4j-2.0.0-20181024.160538-12.jar')
            rule pattern: 'java.util.Objects',
                    result: 'org.jivesoftware.smack.util.Objects'
        }

        jarjar2(jarfile: 'libs/zrtp4j-light-4.1.0.jar') {
            zipfileset(src: 'lib/bundles/zrtp4j-light-4.1.0.jar')
            rule pattern: 'org.jitsi.**',
                    result: 'org.atalk.@1'
        }
    }
}

task updateVersionFile(type: Copy) {
    description '<!-- Generate versionupdate.properties file -->'

    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def date = new Date()
    // ******************************************
    println "*** " + description
    println "# Date: " + date
    println "# last_version = " + versionName
    println "# last_version_code = " + versionCode

    outputs.upToDateWhen {
        false
    }
    from('lib/versionupdate.properties') {
        // Substitute property tokens in files
        expand(DATE: date, BUILD_VERSION: versionName, BUILD_VERSION_CODE: versionCode)
    }
    into 'build/outputs/apk'
}

tasks.withType(JavaCompile) {
        // cmeng - need to perform setup libs (first time & after clean)
    compileTask -> compileTask.dependsOn ndkBuild, jarRepackage
}

// will clean /libs/armeabi/*.so
clean.dependsOn 'ndkClean'
build.dependsOn 'updateVersionFile'
