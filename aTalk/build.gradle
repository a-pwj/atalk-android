buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'org.anarres.jarjar:jarjar-gradle:1.0.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.anarres.jarjar'

repositories {
    maven {
        url 'third_party/m2'

        // Must include these lines for gradle 5.0+
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    google()
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/google/exoplayer/'
    }
    maven {
        // May need manual cleanup for new SNAPSHOT update if same name with date change only:
        // Smack official SNAPSHOT repository accepted by F-Droid
        url 'https://oss.sonatype.org/content/repositories/snapshots'

        // Smack custom library for org.igniterealtime - not recognize by F-Droid
        // url 'https://igniterealtime.org/repo/'
    }
    maven {
        // Git project library as local library project (ucrop) - see https://jitpack.io/docs/
        url 'https://jitpack.io'
    }
}

configurations {
    fdroidImplementation
    playstoreImplementation

    // dependency libraries duplication conflict cause by smack-xmlparser-xpp3
    all*.exclude group: 'xpp3', module: 'xpp3_min'
}

configurations.all {
    it.resolutionStrategy {
        eachDependency { details ->
            // multiple actions can be specified
            if (details.requested.group == "org.igniterealtime.smack" && ['smack-experimental', 'smack-extensions'].contains(details.requested.name)) {
                //changing the name reference to smack libraries to its individual jar
                details.useTarget group: details.requested.group, name: "${details.requested.name}-jarjar", version: details.requested.version
            }
        }
    }

    // https://docs.gradle.org/current/userguide/resolution_rules.html
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.bouncycastle' && details.requested.name == 'bcprov-jdk15on' && details.requested.version == '1.66') {
            details.useVersion '1.65'
            details.because 'Fixes ASP bug: Failed to transform bcprov-jdk15on-1.66.jar -> Unsupported class file major version 59'
        }
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "org.atalk.android"
        versionCode 206020
        versionName "2.6.2"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.compileSdkVersion
        multiDexEnabled true

        externalNativeBuild {
            ndkBuild {
                arguments "-Cjni"
            }
        }

        ndk {
            // Specifies the ABI configurations of your native libraries
            // Gradle should build and package with your APK.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    // aTalk is only compatible to ndkVersion '20.0.5594570' max version
    ndkVersion '20.0.5594570'

    /*
     * Is OK for release version, but when build for debug it throws the following message and hangs aTalk:
     * This file is not part of the project. Please include it in the appropriate build file
     * (build.gradle, CMakeLists.txt or Android.mk etc.) and sync the project.
     * See ReleaseNote for fix for aTalk
     */
    externalNativeBuild {
        ndkBuild {
            path file("jni/Android.mk")
        }
    }

    buildFeatures {
        dataBinding true

        // for view binding:
        // viewBinding true
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    flavorDimensions("distribution")
    productFlavors {
        playstore {
            dimension "distribution"
        }

        fdroid {
            dimension "distribution"
        }
    }

    buildTypes {
        release {
            // cannot enable for aTalk string resource as not all usages are per android style
            shrinkResources false
            // too many missing references when enable
            minifyEnabled false
            // useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
        }
    }

    File cfgFile = project.rootProject.file("settings.signing")
    if (cfgFile != null && cfgFile.exists()) {
        println "### Found settings.signing to prepare signingConfig for release signing"
        signingConfigs {
            release {
                Properties config = new Properties()
                config.load(new FileInputStream(cfgFile))

                storeFile file(config.getProperty('keystore'))
                File propsFile = file(config.getProperty('secure_properties'))
                if (propsFile.exists()) {
                    Properties props = new Properties()
                    props.load(new FileInputStream(propsFile))
                    storePassword props.getProperty('key.store.password')
                    keyAlias props.getProperty('key.store.alias')
                    keyPassword props.getProperty('key.alias.password')
                }
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src']

            // disable gradle automatic ndk-build call, which ignore our Android.mk
            jni.srcDirs = []

            // This is necessary if you have pre-compiled libraries .jar/.so in your project.
            jniLibs.srcDirs = ['libs']
        }

        release { java.srcDirs = ['src/release/java'] }
        debug { java.srcDirs = ['src/debug/java'] }
    }

    lintOptions {
        abortOnError false
        lintConfig file("lint.xml")
        disable 'NonConstantResourceId'
        // disable 'MissingTranslation', 'InvalidPackage', 'MissingQuantity', 'AppCompatResource'
    }

    packagingOptions {
        exclude 'jni/**'
        exclude 'mozilla/public-suffix-list.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

ext {
    // for official maven release
    // smackVersion = '4.4.0-beta2'
    smackVersion = '4.4.2'

    // May need manual cleanup for new SNAPSHOT update if same name with date change only:
    // ~\.gradle\caches\modules-2\files-2.1\org.igniterealtime.smack
    // Remove source reference in .idea/libraries if source mismatched with class jar

    // For smack own repository SNAPSHOT release
    // smackVersion = '4.4.0-alpha3-SNAPSHOT' // 20200407.115900-6
}

dependencies {
    implementation project(':android-youtube-player:core')

    // Java compilation dependency: ndkBuild & jarRepackage (avoid class conflict)
    // generated files in libs/$(TARGET_ARCH_ABI)/*.so and libs/*.jar
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.activity:activity:1.3.0-rc01"
    implementation "androidx.fragment:fragment:1.3.5"

    // implementation "com.android.support:support-v4:28.0.0"
    implementation "androidx.legacy:legacy-support-v4:${rootProject.supportLibraryVersion}"
    implementation "androidx.legacy:legacy-support-v13:${rootProject.supportLibraryVersion}"
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.preference:preference:1.1.1"

    implementation "com.google.android.material:material:1.4.0"

    // for android better picker
    implementation 'com.code-troopers.betterpickers:library:3.1.0'
    implementation 'com.jakewharton:butterknife:10.2.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.2'

    implementation('com.jakewharton.timber:timber:4.7.1') {
        transitive = false
    }
    implementation 'com.karumi:dexter:6.2.1'

    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.github.seancfoley:ipaddress:5.3.3'
    implementation 'com.github.evgenyneu:js-evaluator-for-android:v5.0.0'

    // Need latest release to fix incorrect youtube link extraction
    implementation 'com.github.HaarigerHarald:android-youtubeExtractor:46579d1'
    implementation 'com.github.yalantis:ucrop:2.2.7'
    implementation 'com.google.android.exoplayer:exoplayer:2.14.1'

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.10.5'
    implementation 'com.splitwise:tokenautocomplete:4.0.0-beta01'

    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2'

    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0.3'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'
    implementation 'org.apache.james:apache-mime4j-core:0.8.3'
    implementation 'org.bitlet:weupnp:0.1.4'

    // bcprov-jdk15on-1.65 works with Android. From bcprov-jdk15on-1.66, Java 16 (major version 59) is required which Android Studio does not support.
    // Can also use jdk15to18: bcprov-jdk15to18-167.jar - not working on aTalk as conflict with others e.g. zrtp4j, smack-openpgp
    // Duplicate class org.bouncycastle.x509.util.StreamParsingException found in modules jetified-bcprov-jdk15on-1.65
    // (org.bouncycastle:bcprov-jdk15on:1.65) and jetified-bcprov-jdk15to18-1.68 (org.bouncycastle:bcprov-jdk15to18:1.68)

    implementation 'org.bouncycastle:bcpg-jdk15on:1.65'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.65'
    implementation 'org.bouncycastle:bctls-jdk15on:1.65'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.65'

    // Required for debug and tracing for bouncycastle - do not removed
//    implementation jarjar.repackage {
//        from('org.bouncycastle:bctls-jdk15on:1.65') {
//            transitive = false
//        }
//        destinationDir new File("${projectDir}/libs")
//        destinationName "bctls-jdk15on-1.65.jar"
//
//        classDelete 'org.bouncycastle.tls.DTLSServerProtocol**'
//        classDelete 'org.bouncycastle.tls.DTLSClientProtocol**'
//        classDelete 'org.bouncycastle.tls.TlsUtils**'
//    }

    // Fix ZRTP X25519 key exchange - https://github.com/jitsi/zrtp4j/commit/f7575bf6301927a997675726002d309b2acdd5d9
    // Truncate ZRTP KDF output as per RFC - https://github.com/jitsi/zrtp4j/commit/0baa502b9269d0d8a31247d032ee4896f945a344
    // note: bcprov-jdk15on-1.66.jar -> Unsupported class file major version 59
    implementation 'org.jitsi:zrtp4j-light:4.1.2'

    // Required for provisioning discovery
    implementation 'org.jmdns:jmdns:3.5.3'
    implementation 'org.opentelecoms.sdp:sdp-api:1.0'

    implementation "org.igniterealtime.smack:smack-android-extensions:$smackVersion"
    // implementation "org.igniterealtime.smack:smack-bosh:$smackVersion"
    implementation "org.igniterealtime.jbosh:jbosh:0.9.2"

    implementation "org.igniterealtime.smack:smack-compression-jzlib:4.4.0-alpha3-SNAPSHOT"
    implementation "org.igniterealtime.smack:smack-core:$smackVersion"
    implementation "org.igniterealtime.smack:smack-experimental:$smackVersion"
    implementation "org.igniterealtime.smack:smack-extensions:$smackVersion"
    implementation "org.igniterealtime.smack:smack-im:$smackVersion"
    implementation "org.igniterealtime.smack:smack-legacy:$smackVersion"
    implementation "org.igniterealtime.smack:smack-resolver-minidns:$smackVersion"
    implementation "org.igniterealtime.smack:smack-sasl-provided:$smackVersion"
    implementation "org.igniterealtime.smack:smack-tcp:$smackVersion"

    implementation "org.igniterealtime.smack:smack-omemo:$smackVersion"
    implementation "org.igniterealtime.smack:smack-omemo-signal:$smackVersion"

    implementation 'org.jxmpp:jxmpp-jid:1.0.1'
    // (dependencies = jxmpp-core + jxmpp-stringprep-libidn')

    // implementation 'org.jetbrains:annotations-java5:15.0'
    implementation 'org.osgi:osgi.core:7.0.0'

    playstoreImplementation "com.google.android.gms:play-services-location:18.0.0"
    playstoreImplementation "com.google.android.gms:play-services-maps:17.0.1"
    playstoreImplementation "com.google.android.gms:play-services-panorama:17.0.0"

    /*
     * jarjar.repackage with generated dir/filename specified - default in build/jarjar/jarjar-xxx.jar
     * filename must not contains a colon i.e. ":" colon, treated as URL and will failed missing classes
     * destinationName may use relative i.e. "../../libs/fileName.jar to $buildDir/jarjar
     * classDelete must check the actual jar to see if end ** is required - due to multiple components
     * May use className and className$** to delete only the related, but excluding classes with same prefix
     */
    implementation jarjar.repackage {
        from('org.jitsi:fmj:1.0.1-jitsi')
        // destinationDir new File("${projectDir}/libs")
        destinationName "fmj-1.0.1-jitsi.jar"

        classRename 'java.awt.**', 'org.atalk.android.util.java.awt.@1'
        classRename 'java.beans.**', 'org.atalk.android.util.java.beans.@1'
        classRename 'javax.swing.**', 'org.atalk.android.util.javax.swing.@1'
        classRename 'javax.sound.**', 'org.atalk.android.util.javax.sound.@1'
        classRename 'javax.imageio.**', 'org.atalk.android.util.javax.imageio.@1'

        // remove extracted modules for changes
        classDelete 'net.sf.fmj.media.RegistryDefaults'
        classDelete 'javax.media.format.VideoFormat'
        classDelete 'javax.media.Manager**'
    }

    // The latest ice4j-2.0.0-20190607.184546-36.jar seems OK with DISABLE_AWS_HARVESTER_PNAME => false
    // ice4j-2.0.0 work only with AWS disabled - otherwise hang in AWS EC2 conn.getContent()
    // so remove System.setProperty(MappingCandidateHarvesters.DISABLE_AWS_HARVESTER_PNAME, "true")

    // ice4j dependency lib org.bitlet.weupnp uses in uPnP Harvester not working for android:
    // see https://github.com/bitletorg/weupnp/issues/20
    // must include System.setProperty("org.xml.sax.driver", "org.xmlpull.v1.sax2.Driver");
    implementation jarjar.repackage {
        // Do not use the latest master-SNAPSHOT => not compatible with aTalk
        // Use the latest release version: ice4j-2.0.0-20190607.184546-36.jar
        // == 'ice4j:0b052e8f857653c32ef17ae8e35283f7993972ac'
        from('com.github.jitsi:ice4j:0b052e8f857653c32ef17ae8e35283f7993972ac') {
            transitive = false
        }
        // destinationDir new File("${projectDir}/libs")
        destinationName "ice4j-2.0.0-SNAPSHOT.jar"

        // Consumer was introduced in API-24
        classRename 'java.util.function.Consumer', 'org.jivesoftware.smack.util.Consumer'

        // Duration was added in API level-26; see https://github.com/JakeWharton/ThreeTenABP
        classRename 'java.time.Duration', 'org.threeten.bp.Duration'

        // Clean up and optimize call to weupnp call - reduces threads avoid time race condition
        classDelete 'org.ice4j.ice.harvest.UPNPHarvester**'

        // For testing/debug only
        // classDelete 'org.ice4j.ice.Agent**'
        // classDelete 'org.ice4j.ice.ConnectivityCheckClient'
        // classDelete 'org.ice4j.ice.ConnectivityCheckServer'
    }
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'

    // implementation 'ch.imvs:sdes4j:1.1.5' - not compatible due to java library use
    // libraries from maven repository but need to change Base64 to ApacheBase64 to avoid conflict with android
    // declaration of 'org.apache.commons.codec.binary.Base64' appears in /system/framework/org.apache.http.legacy.boot.jar
    implementation jarjar.repackage {
        from('ch.imvs:sdes4j:1.1.4') {
            transitive = false
        }
        // destinationDir new File("${projectDir}/libs")
        destinationName "sde4j-1.1.4.jar"

        // v1.1.5 uses java.util.Base64 was only added in API level 26
        // classRename 'java.util.Base64', 'org.atalk.android.util.java.util.Base64'

        // v1.1.4 uses binary.Base64
        classRename 'org.apache.commons.codec.binary.Base64', 'org.apache.commons.codec.binary.ApacheBase64'
    }
}

/*
 * The task builds all the 3 static libraries i.e. vpx, openssl and ffmpeg; this need to be
 * executed at least once to generate all the static libraries before the aTalk apk build process.
 */
task initJniLibs(type: Exec) {
    workingDir "${projectDir}/jni/static_library_built"
    executable './build-jnilibs4atalk.sh'

    // No working; execute only the last statement to build ffmpeg
    // workingDir "${projectDir}/jni/static_library_built/libvpx"
    // executable './build-vpx4android.sh'

    // workingDir "${projectDir}/jni/static_library_built/openssl"
    // executable './openssl/build-openssl4android.sh'

    // workingDir "${projectDir}/jni/static_library_built/ffmpeg-x264"
    // executable './build-ffmpeg4android.sh'
}

task updateVersionFile(type: Copy) {
    description '<!-- Generate versionupdate.properties file -->'

    def versionName = android.defaultConfig.versionName
    def versionCode = android.defaultConfig.versionCode
    def date = new Date()
    // ******************************************
    println "*** " + description
    println "# Date: " + date
    println "# last_version = " + versionName
    println "# last_version_code = " + versionCode

    outputs.upToDateWhen {
        false
    }
    from('lib/versionupdate.properties') {
        // Substitute property tokens in files
        expand(DATE: date, BUILD_VERSION: versionName, BUILD_VERSION_CODE: versionCode)
    }
    into 'build/outputs/apk'
}

tasks.withType(JavaCompile) {
    // Uncomment below two lines if you want to show all deprecated warnings
    // options.compilerArgs << '-Xlint:unchecked'
    // options.deprecation = true
}

build.dependsOn 'updateVersionFile'
